{
  "alias": "flatten_records",
  "metadata": {
    "description": "Pipeline that flattens nested records and filters by score",
    "version": "1.0.0",
    "tags": ["flatten", "records", "filtering"]
  },
  "nodes": [
    {
      "id": "flatten_records",
      "component_type": "PayloadTransformer",
      "config": {
        "transformation_expression": ".records | map(. as $parent | .sub_records[] | {
          score: .score,
          text: .text,
          metadata: {
            created_at: $parent.metadata.created_at
          }
        } | select(.score > 0.5)) | sort_by(-.score)",
        "validation_data": {
          "input": {
            "records": [
              {
                "score": 0.92,
                "metadata": {
                  "created_at": "2023-11-29T12:34:56Z"
                },
                "sub_records": [
                  {
                    "text": "JQ supports powerful array manipulation functions",
                    "score": 0.88
                  },
                  {
                    "text": "Stream processing in JQ is memory efficient",
                    "score": 0.75
                  }
                ]
              },
              {
                "score": 0.85,
                "metadata": {
                  "created_at": "2023-11-28T09:45:12Z"
                },
                "sub_records": [
                  {
                    "text": "JQ uses a simple dot notation for access",
                    "score": 0.65
                  },
                  {
                    "text": "JSON transformation is JQ's primary purpose",
                    "score": 0.72
                  }
                ]
              }
            ]
          },
          "expected_output": [
            {
              "score": 0.88,
              "text": "JQ supports powerful array manipulation functions",
              "metadata": {
                "created_at": "2023-11-29T12:34:56Z"
              }
            },
            {
              "score": 0.75,
              "text": "Stream processing in JQ is memory efficient",
              "metadata": {
                "created_at": "2023-11-29T12:34:56Z"
              }
            },
            {
              "score": 0.72,
              "text": "JSON transformation is JQ's primary purpose",
              "metadata": {
                "created_at": "2023-11-28T09:45:12Z"
              }
            },
            {
              "score": 0.65,
              "text": "JQ uses a simple dot notation for access",
              "metadata": {
                "created_at": "2023-11-28T09:45:12Z"
              }
            }
          ]
        }
      },
      "inputs": {
        "records": [
          {
            "score": 0.92,
            "metadata": {
              "created_at": "2023-11-29T12:34:56Z"
            },
            "sub_records": [
              {
                "text": "Rust provides memory safety without garbage collection",
                "score": 0.88
              },
              {
                "text": "Zero-cost abstractions are a key feature of Rust",
                "score": 0.75
              }
            ]
          },
          {
            "score": 0.85,
            "metadata": {
              "created_at": "2023-11-28T09:45:12Z"
            },
            "sub_records": [
              {
                "text": "Rust has a strong type system",
                "score": 0.65
              },
              {
                "text": "Traits in Rust enable polymorphism",
                "score": 0.72
              }
            ]
          }
        ]
      }
    }
  ]
}